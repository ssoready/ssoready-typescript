/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as SSOReady from "../../../../../index";
import urlJoin from "url-join";
import * as serializers from "../../../../../../serialization/index";
import * as errors from "../../../../../../errors/index";

export declare namespace ScimDirectories {
    interface Options {
        environment?: core.Supplier<environments.SSOReadyEnvironment | string>;
        apiKey?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }

    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}

export class ScimDirectories {
    constructor(protected readonly _options: ScimDirectories.Options = {}) {}

    /**
     * @param {SSOReady.management.ScimDirectoriesListScimDirectoriesRequest} request
     * @param {ScimDirectories.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await ssoReady.management.scimDirectories.listScimDirectories()
     */
    public async listScimDirectories(
        request: SSOReady.management.ScimDirectoriesListScimDirectoriesRequest = {},
        requestOptions?: ScimDirectories.RequestOptions
    ): Promise<SSOReady.ListScimDirectoriesResponse> {
        const { organizationId, pageToken } = request;
        const _queryParams: Record<string, string | string[] | object | object[]> = {};
        if (organizationId != null) {
            _queryParams["organizationId"] = organizationId;
        }

        if (pageToken != null) {
            _queryParams["pageToken"] = pageToken;
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.SSOReadyEnvironment.Default,
                "v1/scim-directories"
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "ssoready",
                "X-Fern-SDK-Version": "1.1.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
        });
        if (_response.ok) {
            return await serializers.ListScimDirectoriesResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SSOReadyError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SSOReadyError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SSOReadyTimeoutError();
            case "unknown":
                throw new errors.SSOReadyError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * @param {SSOReady.ScimDirectory} request
     * @param {ScimDirectories.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await ssoReady.management.scimDirectories.createScimDirectory({})
     */
    public async createScimDirectory(
        request: SSOReady.ScimDirectory,
        requestOptions?: ScimDirectories.RequestOptions
    ): Promise<SSOReady.CreateScimDirectoryResponse> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.SSOReadyEnvironment.Default,
                "v1/scim-directories"
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "ssoready",
                "X-Fern-SDK-Version": "1.1.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            body: await serializers.ScimDirectory.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
        });
        if (_response.ok) {
            return await serializers.CreateScimDirectoryResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SSOReadyError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SSOReadyError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SSOReadyTimeoutError();
            case "unknown":
                throw new errors.SSOReadyError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * @param {string} id
     * @param {ScimDirectories.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await ssoReady.management.scimDirectories.getScimDirectory("id")
     */
    public async getScimDirectory(
        id: string,
        requestOptions?: ScimDirectories.RequestOptions
    ): Promise<SSOReady.GetScimDirectoryResponse> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.SSOReadyEnvironment.Default,
                `v1/scim-directories/${encodeURIComponent(id)}`
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "ssoready",
                "X-Fern-SDK-Version": "1.1.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
        });
        if (_response.ok) {
            return await serializers.GetScimDirectoryResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SSOReadyError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SSOReadyError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SSOReadyTimeoutError();
            case "unknown":
                throw new errors.SSOReadyError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * @param {string} id
     * @param {SSOReady.ScimDirectory} request
     * @param {ScimDirectories.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await ssoReady.management.scimDirectories.updateScimDirectory("id", {})
     */
    public async updateScimDirectory(
        id: string,
        request: SSOReady.ScimDirectory,
        requestOptions?: ScimDirectories.RequestOptions
    ): Promise<SSOReady.UpdateScimDirectoryResponse> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.SSOReadyEnvironment.Default,
                `v1/scim-directories/${encodeURIComponent(id)}`
            ),
            method: "PATCH",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "ssoready",
                "X-Fern-SDK-Version": "1.1.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            body: await serializers.ScimDirectory.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
        });
        if (_response.ok) {
            return await serializers.UpdateScimDirectoryResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SSOReadyError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SSOReadyError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SSOReadyTimeoutError();
            case "unknown":
                throw new errors.SSOReadyError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * @param {string} id
     * @param {ScimDirectories.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await ssoReady.management.scimDirectories.rotateScimDirectoryBearerToken("id")
     */
    public async rotateScimDirectoryBearerToken(
        id: string,
        requestOptions?: ScimDirectories.RequestOptions
    ): Promise<SSOReady.RotateScimDirectoryBearerTokenResponse> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.SSOReadyEnvironment.Default,
                `v1/scim-directories/${encodeURIComponent(id)}/rotate-bearer-token`
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "ssoready",
                "X-Fern-SDK-Version": "1.1.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
        });
        if (_response.ok) {
            return await serializers.RotateScimDirectoryBearerTokenResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SSOReadyError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SSOReadyError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SSOReadyTimeoutError();
            case "unknown":
                throw new errors.SSOReadyError({
                    message: _response.error.errorMessage,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        const bearer = (await core.Supplier.get(this._options.apiKey)) ?? process?.env["SSOREADY_API_KEY"];
        if (bearer == null) {
            throw new errors.SSOReadyError({
                message: "Please specify SSOREADY_API_KEY when instantiating the client.",
            });
        }

        return `Bearer ${bearer}`;
    }
}
