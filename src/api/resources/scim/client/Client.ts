/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as SSOReady from "../../../index";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization/index";
import * as errors from "../../../../errors/index";

export declare namespace Scim {
    interface Options {
        environment?: core.Supplier<environments.SSOReadyEnvironment | string>;
        apiKey?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }

    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}

export class Scim {
    constructor(protected readonly _options: Scim.Options = {}) {}

    /**
     * @param {SSOReady.ScimListScimGroupsRequest} request
     * @param {Scim.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await ssoReady.scim.listScimGroups({
     *         organizationExternalId: "my_custom_external_id"
     *     })
     */
    public async listScimGroups(
        request: SSOReady.ScimListScimGroupsRequest = {},
        requestOptions?: Scim.RequestOptions
    ): Promise<SSOReady.ListScimGroupsResponse> {
        const { scimDirectoryId, organizationId, organizationExternalId, pageToken } = request;
        const _queryParams: Record<string, string | string[] | object | object[]> = {};
        if (scimDirectoryId != null) {
            _queryParams["scimDirectoryId"] = scimDirectoryId;
        }

        if (organizationId != null) {
            _queryParams["organizationId"] = organizationId;
        }

        if (organizationExternalId != null) {
            _queryParams["organizationExternalId"] = organizationExternalId;
        }

        if (pageToken != null) {
            _queryParams["pageToken"] = pageToken;
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.SSOReadyEnvironment.Default,
                "v1/scim/groups"
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "ssoready",
                "X-Fern-SDK-Version": "1.0.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
        });
        if (_response.ok) {
            return await serializers.ListScimGroupsResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SSOReadyError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SSOReadyError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SSOReadyTimeoutError();
            case "unknown":
                throw new errors.SSOReadyError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * @param {string} id
     * @param {Scim.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await ssoReady.scim.getScimGroup("scim_group_...")
     */
    public async getScimGroup(
        id: string,
        requestOptions?: Scim.RequestOptions
    ): Promise<SSOReady.GetScimGroupResponse> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.SSOReadyEnvironment.Default,
                `v1/scim/groups/${encodeURIComponent(id)}`
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "ssoready",
                "X-Fern-SDK-Version": "1.0.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
        });
        if (_response.ok) {
            return await serializers.GetScimGroupResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SSOReadyError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SSOReadyError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SSOReadyTimeoutError();
            case "unknown":
                throw new errors.SSOReadyError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * @param {SSOReady.ScimListScimUsersRequest} request
     * @param {Scim.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await ssoReady.scim.listScimUsers({
     *         organizationExternalId: "my_custom_external_id"
     *     })
     */
    public async listScimUsers(
        request: SSOReady.ScimListScimUsersRequest = {},
        requestOptions?: Scim.RequestOptions
    ): Promise<SSOReady.ListScimUsersResponse> {
        const { scimDirectoryId, organizationId, organizationExternalId, scimGroupId, pageToken } = request;
        const _queryParams: Record<string, string | string[] | object | object[]> = {};
        if (scimDirectoryId != null) {
            _queryParams["scimDirectoryId"] = scimDirectoryId;
        }

        if (organizationId != null) {
            _queryParams["organizationId"] = organizationId;
        }

        if (organizationExternalId != null) {
            _queryParams["organizationExternalId"] = organizationExternalId;
        }

        if (scimGroupId != null) {
            _queryParams["scimGroupId"] = scimGroupId;
        }

        if (pageToken != null) {
            _queryParams["pageToken"] = pageToken;
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.SSOReadyEnvironment.Default,
                "v1/scim/users"
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "ssoready",
                "X-Fern-SDK-Version": "1.0.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
        });
        if (_response.ok) {
            return await serializers.ListScimUsersResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SSOReadyError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SSOReadyError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SSOReadyTimeoutError();
            case "unknown":
                throw new errors.SSOReadyError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * @param {string} id
     * @param {Scim.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await ssoReady.scim.getScimUser("scim_user_...")
     */
    public async getScimUser(id: string, requestOptions?: Scim.RequestOptions): Promise<SSOReady.GetScimUserResponse> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.SSOReadyEnvironment.Default,
                `v1/scim/users/${encodeURIComponent(id)}`
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "ssoready",
                "X-Fern-SDK-Version": "1.0.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
        });
        if (_response.ok) {
            return await serializers.GetScimUserResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SSOReadyError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SSOReadyError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SSOReadyTimeoutError();
            case "unknown":
                throw new errors.SSOReadyError({
                    message: _response.error.errorMessage,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = (await core.Supplier.get(this._options.apiKey)) ?? process?.env["SSOREADY_API_KEY"];
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
